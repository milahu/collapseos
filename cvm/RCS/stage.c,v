head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2021.03.28.18.22.11;	author vdupras;	state Exp;
branches;
next	1.1;

1.1
date	2021.01.05.19.25.53;	author vdupras;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Auto-insert binary contents bounds spitting code
@
text
@#include <stdint.h>
#include <stdio.h>
#include <unistd.h>
#include "vm.h"

/* This Collapse OS VM runs Forth code from stdin like a regular VM, but at the
   end of its run, it pops the last 2 elements of its PS: It's the range that it
   should spit to stdout (the binary that was compiled).
*/
#ifndef BLKFS_PATH
#error BLKFS_PATH needed
#endif
#ifndef FBIN_PATH
#error FBIN_PATH needed
#endif
#define RAMSTART 0
#define STDIO_PORT 0x00

VM *vm;
static char *suffixcode = "ORG @@ HERE\r";
static char *suffix = NULL;

static uint8_t iord_stdio()
{
	int c;
	if (suffix) {
		c = *suffix++;
		if (!c) {
			c = 0x04; // ASCII EOT
		}
	} else {
		c = getc(stdin);
		if (c == EOF) {
			suffix = suffixcode;
			c = *suffix++;
		}
    }
    return (uint8_t)c;
}

static void iowr_stdio(uint8_t val)
{
    // comment if you don't like verbose staging output
    putc(val, stderr);
}

int main(int argc, char *argv[])
{
    if (argc < 2) {
        vm = VM_init(FBIN_PATH, BLKFS_PATH);
    } else {
        vm = VM_init(FBIN_PATH, argv[1]);
    }
    if (vm == NULL) {
        return 1;
    }
    vm->iord[STDIO_PORT] = iord_stdio;
    vm->iowr[STDIO_PORT] = iowr_stdio;
    while (VM_steps(1));

	word end = VM_PS_pop();
	word start = VM_PS_pop();
    // We're done, now let's spit dict data
    for (int i=start; i<end; i++) {
        putchar(vm->mem[i]);
    }
    VM_printdbg();
    VM_deinit();
    return 0;
}
@


1.1
log
@Initial revision
@
text
@d6 4
a17 3
// To know which part of RAM to dump, we listen to port 2, which at the end of
// its compilation process, spits its HERE addr to port 2 (MSB first)
#define HERE_PORT 0x02
d20 2
a21 5
// We support double-pokes, that is, a first poke to tell where to start the
// dump and a second one to tell where to stop. If there is only one poke, it's
// then ending HERE and we start at sizeof(KERNEL).
static uint16_t start_here = 0;
static uint16_t end_here = 0;
d25 12
a36 3
    int c = getc(stdin);
    if (c == EOF) {
        vm->running = false;
a46 8
static void iowr_here(uint8_t val)
{
    start_here <<=8;
    start_here |= (end_here >> 8);
    end_here <<= 8;
    end_here |= val;
}

a58 1
    vm->iowr[HERE_PORT] = iowr_here;
d61 2
d64 1
a64 1
    for (int i=start_here; i<end_here; i++) {
@
